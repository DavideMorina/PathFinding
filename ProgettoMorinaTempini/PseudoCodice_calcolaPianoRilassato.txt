CalcolaPianoRilassatoGreedy(v,goal,G,tempo,maxOrizzonteTemporale)
	current<-goal
	t<-tempo
	path<-new Path(v,goal)
	while(current!=v && t<maxOrizzonteTmorale)
		foreach n in vicini[current]
			h(n,v)<-calcolaEuristica(n,v)
		n<-vicino con euristica minore
		path <- aggiungi mossa (t,current,n,w)
		t++
		current<-n
	return path



CalcolaPianoRilassato(v,goal,G,w,tempo,maxOrizzonteTemporale)
	Closed <- []
	Open <- {(init, tempo)}
	g[(init, tempo)] <- 0
	Computa euristica h(n,goal)  (per ogni n)
	f[(init, tempo)] <- h[(init,goal)]
	while (open is not empty):
		(v,t) <- coppia in open con valore f minore
		Open <- Open - (v,t)
		Closed <- Closed + (v,t)
		if v==goal:
			return RecostructPath(Init, Goal, P, t)
		if t<maxOrizzonteTemporale:
			foreach n in Adj[v]:
				if (n, t+1) not in Closed:
					setdefault_g(g, (n, t+1), float('inf'))
					if g[(v,t)]+w[(v,n)] < g[(n,t+1)]:
						P[(n,t+1)] <- (v,t)
						g[(n,t+1)] <- g[(v,t)]+w[(v,n)]
						f[(n,t+1)] <- g[(n,t+1)]+h[(n,goal)]
					if (n,t+1) not in Open:
						Open <- Open + (n,t+1)
	return Failure


setdefault_g inizializza g[(n,t+1)] a inf qualora non sia giÃ  stato fatto

		